= Resources:
  == Manuals:
  == Utilities:


= Resources:

== Manuals:
Wikipedia: Pretty Good Privacy        https://en.wikipedia.org/wiki/Pretty_Good_Privacy         
The GNU Privacy Handbook              http://www.gnupg.org/gph/en/manual.html                   
Ubuntu Gnu Privacy Guard Howto        https://help.ubuntu.com/community/GnuPrivacyGuardHowto    
ArchLinux GnuPG                       https://wiki.archlinux.org/index.php/GnuPG
Linux Crypto Archives - Arabesque     http://blog.sanctum.geek.nz/series/linux-crypto

== Utilities:
gnupg.vim: Plugin for gpg files       http://www.vim.org/scripts/script.php?script_id=3645
The Diceware Passphrase Home          http://world.std.com/~reinhold/diceware.html


= GnuPG use for file encrypt

== Set up gpg
~/.gnupg - set up permissions and back up
$ umask 077; tar -cf $HOME/gnupg-backup.tar -C $HOME .gnupg

Edit ~/.gnupg/gpg.conf:
personal-digest-preferences SHA512
cert-digest-algo SHA512
default-preference-list SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed

== Generate key
$ gpg --gen-key
Select RSA and RSA
For the key length, choose the maximum 4096 bit RSA
Select "Does not expire" option
Name the key: Name Last (Comment here) <email>
Passphrase

== Managing keys
$ gpg --list-secret-keys

$ gpg --list-public-keys

See Debian Wiki article on subkey management (https://wiki.debian.org/subkeys) on managing subkeys and
removing the master key (ref by http://blog.sanctum.geek.nz/series/linux-crypto)

== Encrypting a file
gpg [--armor] --recipient <KEY-ID> --encrypt secret-message.txt
gpg -o encrypted_file.gpg --encrypt -r <KEY-ID> original.file

== Decrypting a file
gpg --decrypt filename.gpg


== Symmetric encryption (will ask for passsphrase)
gpg -c filename.txt   # encrypt

gpg filename.txt      # decrypt

= Using with VIM
In .bashrc:
 export GPG_TTY=`tty`
